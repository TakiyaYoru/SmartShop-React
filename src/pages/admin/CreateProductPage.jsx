// src/pages/admin/CreateProductPage.jsx
import React from 'react';
import { useNavigate } from 'react-router-dom';
import ProductForm from './products/ProductForm';
import { useCreateProduct } from '../../hooks/useProducts';
import { useUploadProductImages } from '../../hooks/useUpload';
import toast from 'react-hot-toast';

const CreateProductPage = () => {
  const navigate = useNavigate();
  const { createProduct, loading: createLoading, error: createError } = useCreateProduct();
  const { uploadImages, loading: uploadLoading } = useUploadProductImages();

  const handleSubmit = async (productData, imageFiles) => {
    console.log('üöÄ CreateProductPage: Starting product creation...');
    console.log('üìù Product data:', productData);
    console.log('üñºÔ∏è Image files:', imageFiles);

    try {
      // Step 1: Create product first
      console.log('üî∏ Step 1: Creating product...');
      const createdProduct = await createProduct(productData);
      
      if (!createdProduct) {
        throw new Error('Failed to create product - no product returned');
      }

      if (!createdProduct._id) {
        throw new Error('Failed to create product - no product ID returned');
      }

      console.log('‚úÖ Product created successfully:', createdProduct);

      // Step 2: Upload images if any
      if (imageFiles && imageFiles.length > 0) {
        console.log('üî∏ Step 2: Uploading images...');
        
        try {
          const uploadResult = await uploadImages(createdProduct._id, imageFiles);
          
          if (uploadResult && uploadResult.success) {
            console.log('‚úÖ Images uploaded successfully');
            toast.success(`T·∫°o s·∫£n ph·∫©m v√† upload ${imageFiles.length} ·∫£nh th√†nh c√¥ng!`);
          } else {
            console.warn('‚ö†Ô∏è Image upload failed:', uploadResult?.message);
            toast.warn(`S·∫£n ph·∫©m ƒë√£ t·∫°o th√†nh c√¥ng nh∆∞ng upload ·∫£nh th·∫•t b·∫°i: ${uploadResult?.message || 'Unknown error'}`);
          }
        } catch (uploadError) {
          console.error('‚ùå Image upload error:', uploadError);
          toast.warn(`S·∫£n ph·∫©m ƒë√£ t·∫°o th√†nh c√¥ng nh∆∞ng upload ·∫£nh th·∫•t b·∫°i: ${uploadError.message}`);
        }
      } else {
        console.log('‚ÑπÔ∏è No images to upload');
        toast.success('T·∫°o s·∫£n ph·∫©m th√†nh c√¥ng!');
      }

      // Step 3: Navigate back to products list
      console.log('üî∏ Step 3: Navigating to products list...');
      navigate('/admin/products');

    } catch (error) {
      console.error('‚ùå Create product error:', error);
      
      // Handle specific error cases
      if (error.message.includes('duplicate key error')) {
        toast.error('SKU ƒë√£ t·ªìn t·∫°i, vui l√≤ng ch·ªçn SKU kh√°c');
      } else if (error.message.includes('Category not found')) {
        toast.error('Danh m·ª•c kh√¥ng t·ªìn t·∫°i');
      } else if (error.message.includes('Brand not found')) {
        toast.error('Th∆∞∆°ng hi·ªáu kh√¥ng t·ªìn t·∫°i');
      } else {
        toast.error(`L·ªói t·∫°o s·∫£n ph·∫©m: ${error.message}`);
      }
    }
  };

  const handleCancel = () => {
    navigate('/admin/products');
  };

  const isLoading = createLoading || uploadLoading;

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-2xl font-bold text-gray-900">Th√™m s·∫£n ph·∫©m m·ªõi</h1>
        <p className="mt-1 text-sm text-gray-500">
          T·∫°o s·∫£n ph·∫©m m·ªõi cho c·ª≠a h√†ng
        </p>
      </div>

      {/* Error display */}
      {createError && (
        <div className="bg-red-50 border border-red-200 rounded-lg p-4">
          <div className="flex items-center">
            <div className="text-red-600 mr-3">‚ö†Ô∏è</div>
            <div>
              <h3 className="text-sm font-medium text-red-800">
                L·ªói t·∫°o s·∫£n ph·∫©m
              </h3>
              <p className="text-sm text-red-700 mt-1">
                {createError.message}
              </p>
            </div>
          </div>
        </div>
      )}

      <ProductForm 
        onSubmit={handleSubmit}
        onCancel={handleCancel}
        loading={isLoading}
      />
    </div>
  );
};

export default CreateProductPage;